// <auto-generated />
using System;
using GPTOverflow.Core.StackExchange.Brokers.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GPTOverflow.Core.StackExchange.Brokers.Persistence.Migrations
{
    [DbContext(typeof(StackExchangeDbContext))]
    partial class StackExchangeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("stack_exchange")
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_soft_deleted");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<int>("Reputation")
                        .HasColumnType("int")
                        .HasColumnName("reputation");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("ix_account_is_soft_deleted");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_account_username");

                    b.ToTable("account", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.AccountBadge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<Guid>("BadgeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("badge_id");

                    b.HasKey("Id")
                        .HasName("pk_account_badge");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_account_badge_account_id");

                    b.HasIndex("BadgeId")
                        .HasDatabaseName("ix_account_badge_badge_id");

                    b.ToTable("account_badge", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit")
                        .HasColumnName("accepted");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_answer");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_answer_account_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_answer_question_id");

                    b.ToTable("answer", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Badge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_badge");

                    b.ToTable("badge", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_comment_account_id");

                    b.ToTable("Comment", "stack_exchange");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Flag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<Guid?>("AnswerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("answer_id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("comment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("FlagReasonDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("flag_reason_description");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_flag");

                    b.ToTable("flag", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasMaxLength(500)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<string>("ClosingRemark")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("closing_remark");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<bool>("IsSoftDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_soft_deleted");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_question");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_question_account_id");

                    b.HasIndex("IsSoftDeleted")
                        .HasDatabaseName("ix_question_is_soft_deleted");

                    b.ToTable("question", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.QuestionTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("pk_question_tag");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_tag_question_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_question_tag_tag_id");

                    b.ToTable("question_tag", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tag");

                    b.ToTable("tag", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.View", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid?>("AccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.HasKey("Id")
                        .HasName("pk_view");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_view_question_id");

                    b.ToTable("view", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<Guid?>("AnswerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("answer_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_updated_at");

                    b.Property<string>("LastUpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("last_updated_by");

                    b.Property<Guid?>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_vote");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_vote_account_id");

                    b.ToTable("vote", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.AnswerComment", b =>
                {
                    b.HasBaseType("GPTOverflow.Core.StackExchange.Models.Comment");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("answer_id");

                    b.HasIndex("AnswerId")
                        .HasDatabaseName("ix_answer_comment_answer_id");

                    b.ToTable("answer_comment", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.QuestionComment", b =>
                {
                    b.HasBaseType("GPTOverflow.Core.StackExchange.Models.Comment");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("question_id");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_question_comment_question_id");

                    b.ToTable("question_comment", "stack_exchange");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.AccountBadge", b =>
                {
                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Account", "Account")
                        .WithMany("Badges")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_badge_accounts_account_id");

                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Badge", "Badge")
                        .WithMany()
                        .HasForeignKey("BadgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_badge_badges_badge_id");

                    b.Navigation("Account");

                    b.Navigation("Badge");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Answer", b =>
                {
                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Account", "Account")
                        .WithMany("Answers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_answer_accounts_account_id");

                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_questions_question_id");

                    b.Navigation("Account");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Comment", b =>
                {
                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_comment_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Question", b =>
                {
                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Account", "Account")
                        .WithMany("Questions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.QuestionTag", b =>
                {
                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Question", "Question")
                        .WithMany("Tags")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_tag_questions_question_id");

                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_tag_tags_tag_id");

                    b.Navigation("Question");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.View", b =>
                {
                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Question", null)
                        .WithMany("Views")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_view_questions_question_id");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Vote", b =>
                {
                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_vote_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.AnswerComment", b =>
                {
                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Answer", "Answer")
                        .WithMany("Comments")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_comment_answer_answer_id");

                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Comment", null)
                        .WithOne()
                        .HasForeignKey("GPTOverflow.Core.StackExchange.Models.AnswerComment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_comment_comment_id");

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.QuestionComment", b =>
                {
                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Comment", null)
                        .WithOne()
                        .HasForeignKey("GPTOverflow.Core.StackExchange.Models.QuestionComment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_comment_comment_id");

                    b.HasOne("GPTOverflow.Core.StackExchange.Models.Question", "Question")
                        .WithMany("Comments")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_question_comment_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Account", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Badges");

                    b.Navigation("Comments");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Answer", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("GPTOverflow.Core.StackExchange.Models.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Comments");

                    b.Navigation("Tags");

                    b.Navigation("Views");
                });
#pragma warning restore 612, 618
        }
    }
}
